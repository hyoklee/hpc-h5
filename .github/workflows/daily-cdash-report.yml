name: Daily CDash HPC Report

on:
  schedule:
    # Run daily at 6:00 AM UTC (after CDash has updated with nightly builds)
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  update-cdash-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 pandas

    - name: Run CDash HPC parser
      run: |
        cd src
        python cdash_hpc.py --days 2

    - name: Update README.md
      run: |
        # Create or update README.md with the report content
        cat > README.md << 'EOF'
        # HDF5 HPC Test Results

        This repository tracks HDF5 test results from major HPC systems (Frontier and Perlmutter) via CDash.

        ## Latest Test Results

        EOF

        # Append the markdown report content (skip the title line)
        cd src
        tail -n +3 hpc_test_report.md >> ../README.md

        # Add footer information
        cat >> README.md << 'EOF'

        ## About

        This report is automatically generated daily from [CDash](https://my.cdash.org/index.php?project=HDF5) data.

        - **Data Source**: HDF5 CDash dashboard
        - **Target Systems**: Frontier (OLCF) and Perlmutter (NERSC)
        - **Update Frequency**: Daily at 6:00 AM UTC
        - **Data Range**: Last 2 days

        ## Repository Structure

        - `src/cdash_hpc.py` - CDash HPC test results parser
        - `src/hpc_test_results.csv` - Raw test data (CSV format)
        - `src/hpc_test_report.md` - Detailed markdown report
        - `.github/workflows/daily-cdash-report.yml` - Automation workflow

        ## Usage

        ### Run the parser manually:
        ```bash
        cd src
        python cdash_hpc.py --days 7    # Last 7 days
        python cdash_hpc.py --days 1    # Today only
        python cdash_hpc.py --help      # Show all options
        ```

        ### Generate report from existing data:
        ```bash
        cd src
        python cdash_hpc.py --skip-fetch
        ```

        ## Data Columns

        The parser extracts the following information from build names:
        - **Site**: HPC system (frontier, perlmutter)
        - **Arch**: System architecture (x86_64)
        - **OS**: Operating system (suse-es-15-sp5/sp6)
        - **MPI**: MPI implementation (cmpich, intel-mpi)
        - **Compiler**: Compiler version (gcc, cce, nvc)
        - **Version**: HDF5 version being tested

        ---
        *Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC') by GitHub Actions*
        EOF

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add generated files
        git add README.md src/hpc_test_results.csv src/hpc_test_report.md

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        # Commit with timestamp
        git commit -m "chore: update CDash HPC test results $(date -u '+%Y-%m-%d %H:%M UTC')

        - Update README.md with latest test results
        - Refresh CSV and markdown reports
        - Data from last 2 days of CDash builds

        ðŸ¤– Generated by GitHub Actions"

        # Push changes
        git push

    - name: Create summary
      run: |
        echo "## Daily CDash Report Update Complete ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Files Updated:" >> $GITHUB_STEP_SUMMARY
        echo "- README.md" >> $GITHUB_STEP_SUMMARY
        echo "- src/hpc_test_results.csv" >> $GITHUB_STEP_SUMMARY
        echo "- src/hpc_test_report.md" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Add summary stats if CSV exists
        if [ -f "src/hpc_test_results.csv" ]; then
          BUILDS=$(tail -n +2 src/hpc_test_results.csv | wc -l)
          echo "### Summary:" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Builds**: $BUILDS" >> $GITHUB_STEP_SUMMARY
          echo "- **Data Range**: Last 2 days" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        fi